extract_requirements:
  description: >
    Conduct a comprehensive analysis of the provided unstructured input to extract 
    all requirement statements with business analyst-level precision. Identify and 
    articulate functional behaviors, system capabilities, performance criteria, 
    constraints, interfaces, and quality attributes. Transform informal stakeholder 
    language into atomic, unambiguous requirement statements that are individually 
    testable and verifiable. Apply requirements engineering best practices to infer 
    missing critical details (error handling, edge cases, data validation) while 
    clearly distinguishing between explicit stakeholder statements and logical 
    inferences. Eliminate duplicate concepts and consolidate related requirements 
    into coherent, implementable statements. Each extracted requirement must be 
    traceable to its source and sufficiently detailed to enable accurate 
    classification and eventual implementation without requiring significant 
    clarification from stakeholders.
  expected_output: >
    A comprehensive inventory of atomic requirement statements, each uniquely 
    identified and structured as: [REQ-ID] - [Clear, unambiguous requirement 
    statement] - [Source/Justification]. Requirements must be written in active 
    voice using "shall" statements, be individually verifiable, and include 
    sufficient context for implementation. Provide explicit traceability markers 
    linking each requirement to source material. Include a summary section 
    documenting any assumptions made, inferences drawn, and potential ambiguities 
    identified that require stakeholder clarification. Ensure each requirement 
    is atomic (addresses single functionality), complete (no missing information 
    for basic implementation), and unambiguous (single interpretation possible).
  agent: requirement_extractor

classify_requirements:
  description: >
    Perform systematic classification of extracted requirements according to IEEE 830 
    taxonomy with rigorous justification for each decision. Categorize requirements 
    as: Functional (specific system behaviors, business rules, data processing), 
    Non-Functional (performance, security, usability, reliability, scalability 
    constraints), Interface (external system integrations, user interfaces, hardware 
    interfaces), or Out-of-Scope (beyond current project boundaries but valuable 
    for future phases). Apply consistent classification criteria and identify 
    requirement dependencies, conflicts, and gaps. For functional requirements, 
    sub-categorize by business domain or system module. For non-functional 
    requirements, specify measurable criteria and acceptance thresholds where 
    possible. Validate that each functional requirement has associated non-functional 
    constraints (performance, security, etc.) and flag missing quality attributes.
  expected_output: >
    A systematically organized requirement classification matrix containing: 
    1) Functional Requirements section with sub-categories (Authentication, Data 
    Management, Business Logic, Reporting, etc.), 2) Non-Functional Requirements 
    section with quality attribute categories (Performance, Security, Usability, 
    Reliability, Compatibility), 3) Interface Requirements section, 4) Out-of-Scope 
    items with future consideration notes. Each requirement includes: original ID, 
    refined requirement text, classification rationale, priority level (Critical/
    High/Medium/Low), dependency relationships, and measurable acceptance criteria 
    where applicable. Provide a classification summary with counts per category 
    and identification of any requirements requiring stakeholder clarification.
  agent: classifier

write_srs_document:
  description: >
    Develop a comprehensive, IEEE 830-compliant Software Requirements Specification 
    document that demonstrates senior business analyst expertise and is immediately 
    suitable for stakeholder sign-off and development handover. Structure the 
    document with: 1) Introduction (Purpose, Scope, Definitions, References, 
    Overview), 2) Overall Description (Product Perspective, Product Functions, 
    User Characteristics, Constraints, Assumptions), 3) Specific Requirements 
    (Functional Requirements with use cases, Non-Functional Requirements with 
    measurable criteria, Interface Requirements), 4) Appendices (Data Dictionary, 
    Traceability Matrix). Ensure each functional requirement includes: unique 
    identifier, description, inputs/outputs, processing logic, business rules, 
    exception handling, and acceptance criteria. Write requirements using precise, 
    unambiguous language with "shall" statements. Include comprehensive cross-
    references, requirement dependencies, and traceability to business objectives. 
    Apply professional technical writing standards with consistent terminology, 
    clear diagrams where beneficial, and stakeholder-appropriate language that 
    balances technical accuracy with accessibility.
  expected_output: >
    A publication-ready SRS document in {output_format} format that exceeds IEEE 830 
    standards and demonstrates enterprise-level quality. The document must include: 
    Executive Summary, comprehensive table of contents with page numbers, complete 
    requirement specifications with unique IDs (FR-001, NFR-001, etc.), detailed 
    acceptance criteria for each requirement, comprehensive traceability matrix 
    linking requirements to business objectives, data dictionary defining all 
    technical terms, risk analysis section identifying potential implementation 
    challenges, and assumptions/constraints sections. Each requirement section 
    includes priority rankings, effort estimates where feasible, and dependency 
    mappings. The document should be formatted for immediate stakeholder presentation 
    with professional styling, consistent formatting, and clear section navigation. 
    Include version control information and approval signature blocks.
  agent: srs_writer

validate_consistency:
  description: >
    Execute a comprehensive multi-pass quality assurance review of the SRS document 
    applying enterprise QA standards and business analyst expertise. Conduct systematic 
    validation for: 1) Requirement quality (atomic, testable, unambiguous, complete), 
    2) Internal consistency (no contradictions, aligned terminology, coherent business 
    logic), 3) Completeness (all functional areas covered, exception handling defined, 
    integration points specified), 4) Traceability (all requirements linked to sources 
    and objectives), 5) IEEE 830 compliance (structure, naming conventions, content 
    standards), 6) Stakeholder readiness (clear language, professional presentation, 
    implementable specifications). Identify and document all issues with specific 
    recommendations for resolution. Create a comprehensive validation report that 
    categorizes findings by severity and provides actionable improvement recommendations 
    for each identified issue.
  expected_output: >
    A detailed validation report containing:
      - Executive summary of document quality assessment
      - Categorized findings (Critical, Major, Minor issues)
      - Specific line-by-line issue identification with context
      - Recommended improvements for each finding
      - Consistency analysis across all sections
      - Completeness gap analysis
      - IEEE 830 compliance checklist results
      - Stakeholder readiness assessment
      - Prioritized action items for document enhancement
    The report should be structured for easy review by senior stakeholders and 
    development teams, providing clear guidance for document improvement.
  agent: consistency_checker

generate_latex_srs:
  description: >
    Transform the validated SRS content into a professionally formatted LaTeX document 
    that can be compiled directly into a PDF without modification. Apply all improvements 
    and recommendations from the validation phase to create an enhanced, consistent, 
    and complete requirements specification. The document must strictly follow IEEE 830 
    structural standards and LaTeX best practices for technical documentation.
  expected_output: >
    A fully functional LaTeX document that can be compiled directly into a PDF with 
    no errors. The LaTeX must strictly follow IEEE 830 structural standards, with 
    professionally formatted sections (Introduction, Overall Description, Functional 
    Requirements, Non-Functional Requirements, Constraints, etc.). 
    The document must:
      - Contain complete requirement consistency with no contradictions
      - Provide comprehensive coverage of all functional areas with no gaps
      - Use precise and unambiguous requirement language suitable for development teams
      - Include proper traceability tables or sections (if applicable)
      - Be formatted for senior stakeholder sign-off and immediate development team use

    Use a syntax that is well known and guarantees compatibility with standard LaTeX, do not go for confusing syntax;
    you have to be sure that the syntax you are using is fully correct, if any doubt don't use it.

    Generate a valid standalone LaTeX document that can be compiled with pdflatex 
    without any errors. Follow these rules exactly:

    The document must begin with \documentclass set to article and must end with \end document.

    Use only these standard LaTeX packages: geometry, amsmath, amssymb, amsthm, 
    graphicx, float, caption, subcaption, booktabs, longtable, and hyperref.

    Every environment such as itemize, longtable, and table must be properly opened 
    and closed with matching begin and end commands using the braces where needed.

    Special characters like the underscore, percent sign, and ampersand must be 
    escaped when they appear in normal text (_ â†’ \_, % â†’ \%, & â†’ \&, # â†’ \#).

    For cross references, use the correct LaTeX format such as \hyperref[label] 
    followed by the reference name in braces, or use the standard \ref command 
    with the label in braces. Do not use incorrect formats.

    Ensure all text has proper spacing. For example, write "within 2 seconds" 
    and not "within2 seconds", write "version 1.0" not "version1.0".

    Use proper environments for lists:
      - Use begin itemize with braces for bullet points
      - Use begin enumerate with braces for numbered lists  
      - Use begin description with braces for labeled lists instead of hacking itemize

    For tables:
      - Use p followed by width in braces in tabular for text wrapping
      - Use longtable for multipage tables
      - Avoid overfull hbox warnings by breaking long content

    Output only the LaTeX code itself. Do not include latex code blocks, comments, 
    explanations, or any other extra text. The result must be ready to compile 
    directly into a PDF without needing any manual fixes.

    Always add spaces between numbers and words, escape all LaTeX special characters 
    in text, close every environment properly, and ensure the final output compiles 
    without errors or warnings using standard LaTeX syntax and conventions.
    
    Use the braces where needed in LaTeX commands - you know where to put them 
    based on standard LaTeX syntax.

    latex_guidelines:
      - "Always leave a space between numbers and words. Example: write 'within 2 seconds' instead of 'within2 seconds'."
      - "Use the correct list environment: 'itemize' for bullets, 'enumerate' for numbered lists, and 'description' for labeled lists. Do not simulate labels with itemize."
      - "Escape special LaTeX characters: use \\_ for _, \\% for %, \\& for &, \\# for #, and \\{  for curly braces."
      - "Format tables properly when including long text: use fixed-width columns in tabular or longtable to prevent overflow."
      - "Keep list items concise: avoid long paragraphs inside \\item; split them into shorter sentences or insert manual line breaks (\\\\) if needed."
      - "Replace all placeholder text such as [Date] or [Name] with actual values before finalizing. Use macros like \\today for dates if needed."
      - "Compile and validate the document with pdflatex after generation. Check logs for errors and warnings (e.g., overfull hbox)."
      - "Use only standard LaTeX packages: geometry, amsmath, amssymb, graphicx, float, caption, subcaption, booktabs, longtable, hyperref."

  agent: latex_generator